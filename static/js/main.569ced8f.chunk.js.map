{"version":3,"sources":["board.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","generateBoard","board","Array","fill","map","nums","d","k","rows","row","Set","cols","col","set","add","push","boxes","boxIndex","trunc","anwser","solve","val","num","delete","N","backtrack","n","has","Square","props","showAnwser","disabled","className","value","style","color","maxLength","onChange","e","target","Board","this","startBoard","arr","renderSquare","React","Component","Game","handleChange","status","test","styled","toUpperCase","setState","history","state","current","parseInt","slice","stepNumber","clone","lastNumbers","lastNum","concat","solved","diaplay","move","display","moves","step","desc","onClick","jumpTo","handleClickNewBoard","handleClickShowAnswer","ReactHtmlParser","_key","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.569ced8f.chunk.js","sourcesContent":["function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nexport const generateBoard = () => {\r\n    const N = 9;\r\n    let board = Array(N).fill(0).map(() => Array(N).fill(''));\r\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    //Fill all the diagonal 3x3 matrices\r\n    for (let d = 0; d < N; d += 3) {\r\n        shuffleArray(nums);\r\n        let k = 0;\r\n        for (let i = d; i < d + 3; i++) {\r\n            for (let j = d; j < d + 3; j++) {\r\n                board[i][j] = nums[k];\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const rows = board.map(row => new Set(row));\r\n    const cols = [];\r\n    for (let col = 0; col < board.length; col++) {\r\n        const set = new Set();\r\n        for (let row = 0; row < board.length; row++) {\r\n            set.add(board[row][col]);\r\n        }\r\n        cols.push(set);\r\n    }\r\n    const boxes = {};\r\n    for (let row = 0; row < board.length; row++) {\r\n        for (let col = 0; col < board.length; col++) {\r\n            const boxIndex = Math.trunc(row / 3) * 3 + Math.trunc(col / 3);\r\n            if (!(boxIndex in boxes)) {\r\n                boxes[boxIndex] = new Set();\r\n            }\r\n            boxes[boxIndex].add(board[row][col]);\r\n        }\r\n    }\r\n\r\n    const anwser = solve({ board, rows, cols, boxes });\r\n    board = anwser.map(row => row.map(val => val));\r\n\r\n    //remove elements\r\n    const K = 4;\r\n    let i = 0, j = 0;\r\n    while (i < N && j < N) {\r\n        const step = Math.floor(Math.random() * K);\r\n        j += step;\r\n        if (j >= N) {\r\n            j = 0;\r\n            i++;\r\n            if (i >= N) break;\r\n        }\r\n        const num = board[i][j];\r\n        board[i][j] = '';\r\n        rows[i].delete(num);\r\n        cols[j].delete(num);\r\n        const boxIndex = Math.trunc(i / 3) * 3 + Math.trunc(j / 3);\r\n        boxes[boxIndex].delete(num);\r\n    }\r\n\r\n    return { board, rows, cols, boxes, anwser };\r\n}\r\n\r\n\r\nexport const solve = ({ board, rows, cols, boxes }) => {\r\n\r\n    const N = board.length;\r\n\r\n    const backtrack = (i, j) => {\r\n        if (i === N - 1 && j === N) {\r\n            return true\r\n        } else if (j === N) {\r\n            j = 0;\r\n            i++;\r\n        }\r\n        // current grid is filled\r\n        if (board[i][j] !== '') return backtrack(i, j + 1);\r\n        const boxIndex = Math.trunc(i / 3) * 3 + Math.trunc(j / 3);\r\n        for (let n = 1; n <= 9; n++) {\r\n            if (!rows[i].has(n) && !cols[j].has(n) && !boxes[boxIndex].has(n)) {\r\n                board[i][j] = n;\r\n                rows[i].add(n);\r\n                cols[j].add(n);\r\n                boxes[boxIndex].add(n);\r\n                if (backtrack(i, j + 1)) return true;\r\n                board[i][j] = '';\r\n                rows[i].delete(n);\r\n                cols[j].delete(n);\r\n                boxes[boxIndex].delete(n);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    backtrack(0, 0);\r\n    return board;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport { generateBoard } from './board.js';\r\n\r\nfunction Square(props) {\r\n    if (props.showAnwser) {\r\n        return props.disabled ? (<input\r\n            className=\"square\"\r\n            value={props.value}\r\n            disabled\r\n        />) : (<input\r\n            style={{ color: '#d74242' }}\r\n            className=\"square\"\r\n            value={props.value}\r\n            disabled />)\r\n    }\r\n\r\n    if (props.disabled) {\r\n        return <input\r\n            className=\"square\"\r\n            value={props.value}\r\n            disabled\r\n        />\r\n    }\r\n\r\n    return <input\r\n        className=\"square\"\r\n        maxLength=\"1\"\r\n        value={props.value}\r\n        onChange={e => props.onChange(e.target.value)}\r\n        style={{ color: \"blue\" }}\r\n    />\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(val, row, col) {\r\n        const disabled = this.props.startBoard[row][col] !== '';\r\n        return <Square\r\n            key={`${row},${col}`}\r\n            value={val}\r\n            disabled={disabled}\r\n            showAnwser={this.props.showAnwser}\r\n            onChange={(num) => this.props.onChange(num, row, col)}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        const board = this.props.board;\r\n        return (\r\n            <div className='board'>\r\n                {board.map((arr, row) => <div key={row} className=\"board-row\">{\r\n                    arr.map((val, col) => this.renderSquare(val, row, col))\r\n                }</div>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { board, rows, cols, boxes, anwser } = generateBoard();\r\n        const lastNumbers = Array(board.length).fill(0).map(() => Array(9).fill(null));\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    board,\r\n                    rows,\r\n                    cols,\r\n                    boxes,\r\n                    lastNumbers,\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            status: '',\r\n            solved: {\r\n                diaplay: false,\r\n                anwser,\r\n            },\r\n        }\r\n    }\r\n\r\n    handleChange = (num, row, col) => {\r\n\r\n        let status;\r\n        if (!/[1-9]/.test(num)) {\r\n            status = `key ${styled(num.toUpperCase())} is pressed, expect key 1 to 9`;\r\n            this.setState({ status });\r\n            return;\r\n        }\r\n\r\n        let history = this.state.history;\r\n        let current = history[history.length - 1];\r\n        const boxIndex = Math.trunc(row / 3) * 3 + Math.trunc(col / 3);\r\n\r\n        num = parseInt(num);\r\n\r\n        if (current.rows[row].has(num)) {\r\n            status = `cannot place ${styled(num)} in board row ${styled(row + 1)}`;\r\n            this.setState({ status });\r\n            return;\r\n        } else if (current.cols[col].has(num)) {\r\n            status = `cannot place ${styled(num)} in board column ${styled(col + 1)}`;\r\n            this.setState({ status });\r\n            return;\r\n        } else if (current.boxes[boxIndex].has(num)) {\r\n            status = `cannot place ${styled(num)} in board row ${styled(row + 1)}, column ${styled(col + 1)}`;\r\n            this.setState({ status });\r\n            return;\r\n        }\r\n\r\n        history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        current = history[history.length - 1];\r\n        const { board, rows, cols, boxes } = clone(current);\r\n        let lastNumbers = current.lastNumbers.map(row => row.map(val => val));\r\n        const lastNum = lastNumbers[col][row];\r\n        if (lastNum) {\r\n            rows[row].delete(lastNum);\r\n            cols[col].delete(lastNum);\r\n            boxes[boxIndex].delete(lastNum);\r\n        }\r\n        board[row][col] = num;\r\n        rows[row].add(num);\r\n        cols[col].add(num);\r\n        boxes[boxIndex].add(num);\r\n        lastNumbers[col][row] = num;\r\n        this.setState({\r\n            history: history.concat([{\r\n                board,\r\n                rows,\r\n                cols,\r\n                boxes,\r\n                lastNumbers,\r\n            }]),\r\n            stepNumber: history.length,\r\n            status: '',\r\n        });\r\n    }\r\n\r\n    jumpTo(move) {\r\n        this.setState({\r\n            stepNumber: move,\r\n            solved: { ...this.state.solved, display: false }\r\n        });\r\n    }\r\n\r\n    handleClickNewBoard() {\r\n        const { board, rows, cols, boxes, anwser } = generateBoard();\r\n        this.setState({\r\n            history: [\r\n                {\r\n                    board,\r\n                    rows,\r\n                    cols,\r\n                    boxes\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            status: '',\r\n            solved: {\r\n                diaplay: false,\r\n                anwser,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleClickShowAnswer() {\r\n        const solved = this.state.solved;\r\n        this.setState({ solved: { ...solved, display: true } })\r\n    }\r\n\r\n    render() {\r\n\r\n        const status = this.state.status;\r\n        const history = this.state.history;\r\n        const solved = this.state.solved;\r\n        const current = solved.display ? { board: solved.anwser, rows: null, cols: null, boxes: null } :\r\n            history[this.state.stepNumber];\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        startBoard={this.state.history[0].board}\r\n                        showAnwser={solved.display}\r\n                        board={current.board}\r\n                        rows={current.rows}\r\n                        cols={current.cols}\r\n                        boxes={current.boxes}\r\n                        onChange={(num, row, col) => this.handleChange(num, row, col)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>Sudoku Game <span><button onClick={() => this.handleClickNewBoard()}>New board</button></span> <span><button onClick={() => this.handleClickShowAnswer()}>Show anwser</button></span></div>\r\n                    <div>{ReactHtmlParser(status)}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n// helper functions\r\nconst clone = (current) => {\r\n    const board = current.board.map(row => row.map(val => val));\r\n    const rows = current.rows.map(set => new Set(set));\r\n    const cols = current.cols.map(set => new Set(set));\r\n    const boxes = {};\r\n    for (let _key in current.boxes) {\r\n        boxes[_key] = new Set(current.boxes[_key]);\r\n    }\r\n    return { board, rows, cols, boxes };\r\n}\r\n\r\nconst styled = (s) => `<strong style=\"color:#d74242\">${s}</strong>`\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}